// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// USStreetAddress u s street address
//
// swagger:model USStreetAddress
type USStreetAddress struct {

	// The formatted version of the street address.
	// Example: 111 8th Ave
	// Required: true
	Formatted *string `json:"formatted"`

	// The number of the street address. It is important that this is stored in a string. Many valid house numbers cannot be represented by just a number, in which case the alphanumeric_number field will be populated: Some fake examples include '1/2 Smith Street', '41-13 39th Place', 'E400N200 Pike Street'. Note that the alpha version of the API only includes numeric addresses, but our stable release will handle this"
	// Example: 111
	Number string `json:"number,omitempty"`

	// A directional (N, E, S, W, etc) that appears after the street name. For example, 'W' is the postdirectional in '1 Main Street W'.
	// Example: SE
	Postdirectional string `json:"postdirectional,omitempty"`

	// A directional (N, E, S, W, etc) that appears before the street name. For example, 'E' is the predirectional in '1 E Main Street'.
	// Example: NW
	Predirectional string `json:"predirectional,omitempty"`

	// The street name of the address. This omits the road type. So the address '101 Main Street' would have 'Main' in the StreetName field.
	// Example: 8th
	// Required: true
	StreetName *string `json:"street_name"`

	// The type of the street: Rd, St, Ave, etc. So the address '101 Main Street' would be 'St'. May be omitted for some roads. For example, 'Broadway' and 'The Embarcadero' are valid road names that do not have road types.
	// Example: Avenue
	Type string `json:"type,omitempty"`

	// A unit designator in an address, if one is present. For example, 'Apt 3' is the unit designator in '1 Main Street Apt 3'. This may combine more than one designator into the same field: 'Building 2 Floor 1'.
	// Example: Apt 3B
	UnitDesignator string `json:"unit_designator,omitempty"`
}

// Validate validates this u s street address
func (m *USStreetAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFormatted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *USStreetAddress) validateFormatted(formats strfmt.Registry) error {

	if err := validate.Required("formatted", "body", m.Formatted); err != nil {
		return err
	}

	return nil
}

func (m *USStreetAddress) validateStreetName(formats strfmt.Registry) error {

	if err := validate.Required("street_name", "body", m.StreetName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this u s street address based on context it is used
func (m *USStreetAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *USStreetAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *USStreetAddress) UnmarshalBinary(b []byte) error {
	var res USStreetAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
