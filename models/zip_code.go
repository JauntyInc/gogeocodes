// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ZIPCode ZIP code
//
// swagger:model ZIPCode
type ZIPCode struct {

	// A string with the formatted version of the ZIP code. This may include the +4 extension if available.
	// Example: 10011-1234
	Formatted string `json:"formatted,omitempty"`

	// The optional plus-four code, if available. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
	// Example: 1234
	PlusFour int64 `json:"plus_four,omitempty"`

	// The main 5-digit ZIP Code. Note that this will omit leading zeroes, so if you need to display the ZIP Code, you need to either pad with zeroes or use the 'formatted' field. Provided as a convenience for developers that need the numeric form.
	// Example: 10011
	// Required: true
	ZIP *int64 `json:"zip"`
}

// Validate validates this ZIP code
func (m *ZIPCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateZIP(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ZIPCode) validateZIP(formats strfmt.Registry) error {

	if err := validate.Required("zip", "body", m.ZIP); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this ZIP code based on context it is used
func (m *ZIPCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ZIPCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ZIPCode) UnmarshalBinary(b []byte) error {
	var res ZIPCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
