// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1Test(params *V1TestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1TestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V1Test pings function that tests the API key

  **Description**

An endpoint that always responds with the string `authorized!` when authentication works.
This can be used as a check that the authentication on a request is valid.

Please include your key on the `Authorization` header or the query parameter `api_key`

**No account required**

This endpoint requires an account to be accessed, but does not count as
a lookup. Requests may still be rejected due to rate limiting by any facet (account, IP, etc),
in order to preserve the health of the service.
*/
func (a *Client) V1Test(params *V1TestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1TestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1TestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1-test",
		Method:             "GET",
		PathPattern:        "/v1/test",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1TestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1TestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1-test: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
