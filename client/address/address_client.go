// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new address API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for address API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	V1AddressGeocode(params *V1AddressGeocodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1AddressGeocodeOK, error)

	V1AddressStructuredGeocode(params *V1AddressStructuredGeocodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1AddressStructuredGeocodeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  V1AddressGeocode geocodes an unstructured address string

  **Description**<br><br>

Geocode a single address. This parses the input address and matches it against
our records to produce the geocoded result.

This does a best-attempt to geocode the given address in the face of human errors in the
input data. This can be the wrong city ("New York City" instead of "New York") a missing
postal code, a misspelled street name, house numbers that don't exist, etc.

As more corrections are needed, the certainty in the result drops. This can be tuned with a
minimum certainty parameter. If our confidence in the result is less than the minimum certainty,
it will not be returned. The default is 30. 30 was chosen to be robust against unclean data
without returning results that are unlikely to be true. We don't recommend setting this
parameter above 90 because exact matching is too restrictive for the mistakes that people
typically make when writing addresses -- even people writing their own addresses will make
mistakes that are never corrected.

**Lookup cost**

This query requires an account. Please sign up at https://geo.codes/signup and get your API
key at https://geo.codes/account/api

One query counts as one lookup. It only costs a query if it returns data. If you have exceeded
your account quota, the request will not succeed.
*/
func (a *Client) V1AddressGeocode(params *V1AddressGeocodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1AddressGeocodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AddressGeocodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1-address-geocode",
		Method:             "GET",
		PathPattern:        "/v1/address/geocode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1AddressGeocodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AddressGeocodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1-address-geocode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  V1AddressStructuredGeocode geocodes structured addresses

  **Description**<br>

Geocode a single structured address. This takes address components (street, city, state, etc)
and matches it against our records to produce the geocoded result.

This does a best-attempt to geocode the given address in the face of human errors in the
input data. This can be the wrong city ("New York City" instead of "New York") a missing
postal code, a misspelled street name, house numbers that don't exist, etc.

As more corrections are needed, the certainty in the result drops. This can be tuned with a
minimum certainty parameter. If our confidence in the result is less than the minimum certainty,
it will not be returned. The default is 30%. 30% was chosen to be robust against unclean data
without returning results that are unlikely to be true. We don't recommend setting this
parameter above 90% because exact matching is too restrictive for the mistakes that people
typically make when writing addresses -- even people writing their own addresses will make
mistakes that are never corrected because they Just Work.

**Lookup cost**<br>

This query requires an account. Please sign up at https://geo.codes/signup and get your API
key at https://geo.codes/account/api

One query counts as one lookup. It only costs a query if it returns data. If you have exceeded
your account quota, the request will not succeed.
*/
func (a *Client) V1AddressStructuredGeocode(params *V1AddressStructuredGeocodeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*V1AddressStructuredGeocodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewV1AddressStructuredGeocodeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "v1-address-structured-geocode",
		Method:             "GET",
		PathPattern:        "/v1/address/structured_geocode",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &V1AddressStructuredGeocodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*V1AddressStructuredGeocodeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for v1-address-structured-geocode: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
