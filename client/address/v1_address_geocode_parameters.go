// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1AddressGeocodeParams creates a new V1AddressGeocodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV1AddressGeocodeParams() *V1AddressGeocodeParams {
	return &V1AddressGeocodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV1AddressGeocodeParamsWithTimeout creates a new V1AddressGeocodeParams object
// with the ability to set a timeout on a request.
func NewV1AddressGeocodeParamsWithTimeout(timeout time.Duration) *V1AddressGeocodeParams {
	return &V1AddressGeocodeParams{
		timeout: timeout,
	}
}

// NewV1AddressGeocodeParamsWithContext creates a new V1AddressGeocodeParams object
// with the ability to set a context for a request.
func NewV1AddressGeocodeParamsWithContext(ctx context.Context) *V1AddressGeocodeParams {
	return &V1AddressGeocodeParams{
		Context: ctx,
	}
}

// NewV1AddressGeocodeParamsWithHTTPClient creates a new V1AddressGeocodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewV1AddressGeocodeParamsWithHTTPClient(client *http.Client) *V1AddressGeocodeParams {
	return &V1AddressGeocodeParams{
		HTTPClient: client,
	}
}

/* V1AddressGeocodeParams contains all the parameters to send to the API endpoint
   for the v1 address geocode operation.

   Typically these are written to a http.Request.
*/
type V1AddressGeocodeParams struct {

	/* MinConfidence.

	   The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
	*/
	MinConfidence *int64

	/* Q.

	   The unstructured address to geocode. Expected to be roughly the format that is used by the USPS to deliver mail.
	*/
	Q string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v1 address geocode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1AddressGeocodeParams) WithDefaults() *V1AddressGeocodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v1 address geocode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1AddressGeocodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the v1 address geocode params
func (o *V1AddressGeocodeParams) WithTimeout(timeout time.Duration) *V1AddressGeocodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 address geocode params
func (o *V1AddressGeocodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 address geocode params
func (o *V1AddressGeocodeParams) WithContext(ctx context.Context) *V1AddressGeocodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 address geocode params
func (o *V1AddressGeocodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 address geocode params
func (o *V1AddressGeocodeParams) WithHTTPClient(client *http.Client) *V1AddressGeocodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 address geocode params
func (o *V1AddressGeocodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMinConfidence adds the minConfidence to the v1 address geocode params
func (o *V1AddressGeocodeParams) WithMinConfidence(minConfidence *int64) *V1AddressGeocodeParams {
	o.SetMinConfidence(minConfidence)
	return o
}

// SetMinConfidence adds the minConfidence to the v1 address geocode params
func (o *V1AddressGeocodeParams) SetMinConfidence(minConfidence *int64) {
	o.MinConfidence = minConfidence
}

// WithQ adds the q to the v1 address geocode params
func (o *V1AddressGeocodeParams) WithQ(q string) *V1AddressGeocodeParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the v1 address geocode params
func (o *V1AddressGeocodeParams) SetQ(q string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *V1AddressGeocodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MinConfidence != nil {

		// query param min_confidence
		var qrMinConfidence int64

		if o.MinConfidence != nil {
			qrMinConfidence = *o.MinConfidence
		}
		qMinConfidence := swag.FormatInt64(qrMinConfidence)
		if qMinConfidence != "" {

			if err := r.SetQueryParam("min_confidence", qMinConfidence); err != nil {
				return err
			}
		}
	}

	// query param q
	qrQ := o.Q
	qQ := qrQ
	if qQ != "" {

		if err := r.SetQueryParam("q", qQ); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
