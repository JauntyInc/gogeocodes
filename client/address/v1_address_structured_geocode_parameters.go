// Code generated by go-swagger; DO NOT EDIT.

package address

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewV1AddressStructuredGeocodeParams creates a new V1AddressStructuredGeocodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewV1AddressStructuredGeocodeParams() *V1AddressStructuredGeocodeParams {
	return &V1AddressStructuredGeocodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewV1AddressStructuredGeocodeParamsWithTimeout creates a new V1AddressStructuredGeocodeParams object
// with the ability to set a timeout on a request.
func NewV1AddressStructuredGeocodeParamsWithTimeout(timeout time.Duration) *V1AddressStructuredGeocodeParams {
	return &V1AddressStructuredGeocodeParams{
		timeout: timeout,
	}
}

// NewV1AddressStructuredGeocodeParamsWithContext creates a new V1AddressStructuredGeocodeParams object
// with the ability to set a context for a request.
func NewV1AddressStructuredGeocodeParamsWithContext(ctx context.Context) *V1AddressStructuredGeocodeParams {
	return &V1AddressStructuredGeocodeParams{
		Context: ctx,
	}
}

// NewV1AddressStructuredGeocodeParamsWithHTTPClient creates a new V1AddressStructuredGeocodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewV1AddressStructuredGeocodeParamsWithHTTPClient(client *http.Client) *V1AddressStructuredGeocodeParams {
	return &V1AddressStructuredGeocodeParams{
		HTTPClient: client,
	}
}

/* V1AddressStructuredGeocodeParams contains all the parameters to send to the API endpoint
   for the v1 address structured geocode operation.

   Typically these are written to a http.Request.
*/
type V1AddressStructuredGeocodeParams struct {

	/* City.

	   The city. Not required, but it's highly recommended that you add either the city or postal_code fields.
	*/
	City *string

	/* MinConfidence.

	   The minimum confidence in the results required to return an address, as a percentage between 0 and 100. Default: 30. To accept only exact data matches, choose 100. To be as permissive as possible, set it to 0. We don't recommend setting this higher than 90. It is very common for people to write their own addresses in ways that deviate from the exact match.
	*/
	MinConfidence *int64

	/* PostalCode.

	   The postal code, for example, a ZIP code. Not required, but if this is not present, we recommend adding the city and the state for best results.
	*/
	PostalCode *string

	/* State.

	   The state with the address. Not required, but it's highly recommended that you add the postal_code if the state is not present.
	*/
	State *string

	/* StreetAddress.

	   The street address line, including the number and street type.
	*/
	StreetAddress string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the v1 address structured geocode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1AddressStructuredGeocodeParams) WithDefaults() *V1AddressStructuredGeocodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the v1 address structured geocode params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *V1AddressStructuredGeocodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithTimeout(timeout time.Duration) *V1AddressStructuredGeocodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithContext(ctx context.Context) *V1AddressStructuredGeocodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithHTTPClient(client *http.Client) *V1AddressStructuredGeocodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCity adds the city to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithCity(city *string) *V1AddressStructuredGeocodeParams {
	o.SetCity(city)
	return o
}

// SetCity adds the city to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetCity(city *string) {
	o.City = city
}

// WithMinConfidence adds the minConfidence to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithMinConfidence(minConfidence *int64) *V1AddressStructuredGeocodeParams {
	o.SetMinConfidence(minConfidence)
	return o
}

// SetMinConfidence adds the minConfidence to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetMinConfidence(minConfidence *int64) {
	o.MinConfidence = minConfidence
}

// WithPostalCode adds the postalCode to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithPostalCode(postalCode *string) *V1AddressStructuredGeocodeParams {
	o.SetPostalCode(postalCode)
	return o
}

// SetPostalCode adds the postalCode to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetPostalCode(postalCode *string) {
	o.PostalCode = postalCode
}

// WithState adds the state to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithState(state *string) *V1AddressStructuredGeocodeParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetState(state *string) {
	o.State = state
}

// WithStreetAddress adds the streetAddress to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) WithStreetAddress(streetAddress string) *V1AddressStructuredGeocodeParams {
	o.SetStreetAddress(streetAddress)
	return o
}

// SetStreetAddress adds the streetAddress to the v1 address structured geocode params
func (o *V1AddressStructuredGeocodeParams) SetStreetAddress(streetAddress string) {
	o.StreetAddress = streetAddress
}

// WriteToRequest writes these params to a swagger request
func (o *V1AddressStructuredGeocodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.City != nil {

		// query param city
		var qrCity string

		if o.City != nil {
			qrCity = *o.City
		}
		qCity := qrCity
		if qCity != "" {

			if err := r.SetQueryParam("city", qCity); err != nil {
				return err
			}
		}
	}

	if o.MinConfidence != nil {

		// query param min_confidence
		var qrMinConfidence int64

		if o.MinConfidence != nil {
			qrMinConfidence = *o.MinConfidence
		}
		qMinConfidence := swag.FormatInt64(qrMinConfidence)
		if qMinConfidence != "" {

			if err := r.SetQueryParam("min_confidence", qMinConfidence); err != nil {
				return err
			}
		}
	}

	if o.PostalCode != nil {

		// query param postal_code
		var qrPostalCode string

		if o.PostalCode != nil {
			qrPostalCode = *o.PostalCode
		}
		qPostalCode := qrPostalCode
		if qPostalCode != "" {

			if err := r.SetQueryParam("postal_code", qPostalCode); err != nil {
				return err
			}
		}
	}

	if o.State != nil {

		// query param state
		var qrState string

		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {

			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}
	}

	// query param street_address
	qrStreetAddress := o.StreetAddress
	qStreetAddress := qrStreetAddress
	if qStreetAddress != "" {

		if err := r.SetQueryParam("street_address", qStreetAddress); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
